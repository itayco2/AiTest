# docker-compose.yml
version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: avatar-backend
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://avatar_user:avatar_pass@postgres:5432/avatar_db
      - REDIS_URL=redis://redis:6379
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - CORS_ORIGINS=http://localhost:4200,http://localhost:80
    volumes:
      - ./Backend:/app
      - ./models:/app/models  # SMPL models directory
    depends_on:
      - postgres
      - redis
    command: uvicorn avatar_generation:app --host 0.0.0.0 --port 8000 --reload

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: avatar-frontend
    ports:
      - "4200:4200"
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - /app/node_modules  # Prevent overwriting node_modules
    environment:
      - NODE_ENV=development
    command: npm start

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: avatar-postgres
    environment:
      - POSTGRES_USER=avatar_user
      - POSTGRES_PASSWORD=avatar_pass
      - POSTGRES_DB=avatar_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: avatar-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: avatar-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./dist:/usr/share/nginx/html:ro
    depends_on:
      - backend
    profiles:
      - production

  # MinIO (Local S3-compatible storage for development)
  minio:
    image: minio/minio:latest
    container_name: avatar-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    profiles:
      - development

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  default:
    name: avatar-network